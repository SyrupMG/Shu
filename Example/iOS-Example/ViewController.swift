//
//  ViewController.swift
//  iOS-Example
//
//  Created by –õ—ã—Å–µ–Ω–∫–æ –ê–ª–µ–∫—Å–µ–π –î–∏–º–∏—Ç—Ä–∏–µ–≤–∏—á on 16/10/2018.
//  Copyright ¬© 2018 CocoaPods. All rights reserved.
//

import UIKit
import ShuCore
import ShuCRUD
import Shu_PromiseKit
import PromiseKit

struct Todo: Codable {
    var id: Int = 0
    var userId: Int? = 0
    var title: String? = ""
    var completed: Bool? = false
}

private let _baseURL = "https://jsonplaceholder.typicode.com/"
class TodoResource: CRUDApiResource<Todo> {
    convenience init() {
        self.init(baseURL: _baseURL, resourcePath: "/todos/", apiMapper: JSONApiMapper())
    }
}

class TodosResource: CRUDApiResource<[Todo]> {
    convenience init() {
        self.init(baseURL: _baseURL, resourcePath: "/todos/", apiMapper: JSONApiMapper())
    }
}

class SimpleLogger: Logger {
    func log(_ message: @autoclosure () -> Any, context: Any?) {
        print("\(String(describing: context)): \(message())")
    }
}

class ViewController: UIViewController {
    private let log = SimpleLogger()
    private var netMonitorLogger: GenericNetworkMonitorLogger!
    private var apiService: ApiService!

    override func viewDidLoad() {
        super.viewDidLoad()
        netMonitorLogger = GenericNetworkMonitorLogger(logger: log)
        apiService = ShuApiService(eventMonitors: [netMonitorLogger])
        // –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Foo —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ "Bar"
        apiService.addMiddleware {
            $0.headers { _, _ in return ["X-Foo": "Bar"] }
        }
        // –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –¥–æ–±–∞–≤–∏—Ç—Å—è –∑–∞–≥–æ–ª–æ–≤–æ–∫ X-Bar —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ "Some"
        apiService.addMiddleware {
            $0.headers { _, _ in return ["X-Bar":"Some"] }
        }
        // –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "X-Foo" –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω –Ω–∞ –Ω–æ–≤—ã–π —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ "Bar1",
        // —Ç.–∫. —ç—Ç–æ—Ç –º–∏–¥–ª–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ –∏ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω —Å –±–æ–ª—å—à–∏–º –ø—Ä–∏–æ—Ä–∏–µ—Ç–µ—Ç–æ–º
        apiService.addMiddleware {
            $0.headers { _, _ in return ["X-Foo": "Bar1"] }
        }
        
        // –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç [Todo], –¥–æ–±–∞–≤–∏–º –∫ –æ–ø–µ—Ä–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ `X-TODO-ARR: Yes!`
        // –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ `X-TODO-ARR: No`
        apiService.addMiddleware {
            $0.headers { op, opResType -> [String: String] in
                if opResType is [Todo].Type {
                    return ["X-TODO-ARR": "Yes!"]
                } else {
                    return ["X-TODO-ARR": "No"]
                }
            }
        }
        
        // –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ—Ç –±–ª–æ–∫ –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –Ω–∞ –í–°–ï–• —É—Å–ø–µ—à–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö apiService.
        // –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –í–°–ï–ì–î–ê –¥–µ–ª–∞—Ç—å –∫–∞–∫–æ–µ-—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ
        apiService.addMiddleware {
            $0.success { [log] res, op, opResType in
                if res is [Todo] {
                    log.log("–ü–æ–ª—É—á–∏–ª–∏ [TODO]", context: "üÖ∞Ô∏èüÖ∞Ô∏èüÖ∞Ô∏è")
                }
                if res is Todo {
                    log.log("–ü–æ–ª—É—á–∏–ª–∏ TODO", context: "üÖ∞Ô∏èüÖ∞Ô∏èüÖ∞Ô∏è")
                }
            }
        }
        
        apiService.addMiddleware {
            $0.requestBarier { [log] op, opResType in
                if op is ShuCodableOperation<[Todo]> {
                    log.log(
                        """
                        –û–ø–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 5 —Å–µ–∫—É–Ω–¥
                        ShuCodableOperation<[Todo]>
                        """,
                        context: "üÖ±Ô∏èüÖ±Ô∏èüÖ±Ô∏è"
                    )
                    try await Task.sleep(nanoseconds: 5 * 1_000_000_000)
                }
                
                if opResType is Todo.Type {
                    log.log(
                        """
                        –û–ø–µ—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 7 —Å–µ–∫—É–Ω–¥
                        Shu.Operation<Todo>
                        """,
                        context: "üÖ±Ô∏èüÖ±Ô∏èüÖ±Ô∏è"
                    )
                    try await Task.sleep(nanoseconds: 5 * 1_000_000_000)
                }
            }
        }
    }
    
    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
        
        let resource = TodoResource()
        let multipleResource = TodosResource()

            
        _ = resource.list()(on: apiService)
            .then { [apiService] todos in
                resource.read(resourceId: "\(todos.first!.id)")(on: apiService!)
            }
            .then { [apiService] todo -> Promise<Todo> in
                var todo = todo
                todo.title = "teta gamma delta"
                return resource.update(resourceId: "\(todo.id)", object: todo)(on: apiService!)
            }
            .then { [apiService] _ -> Promise<[Todo]> in
                let todos = (0...5).map { Todo(id: $0, title: "test \($0)", completed: false) }
                return multipleResource.create(object: todos)(on: apiService!)
            }
            .catch { [log] error in
                log.log(error, context: nil)
            }
    }
}

